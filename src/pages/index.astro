---
import Layout from '../layouts/Layout.astro';
import locations from '../data/locations.json';

// Helper function to split states into 3 columns
const statesCol1 = locations.states.slice(0, 10);
const statesCol2 = locations.states.slice(10, 20);
const statesCol3 = locations.states.slice(20);
const unionTerritories = locations.unionTerritories;
---

<Layout title="Where In India - The most trusted list of recos for India">
	<main>
		<!-- New Hero Section -->
		<header class="hero">
			<div class="hero-image"></div>
			<div class="hero-text">
				<h1>Discover Everything in India</h1>
				<p>A curated directory of places, culture, and experiences across every state — explored, mapped, and made easy for you.</p>
			</div>
		</header>

		<!-- Search Bar -->
		<div class="search-container">
			<div class="search-bar">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
				</svg>
				<input type="text" id="state-search" placeholder="Search for a state or city...">
			</div>
		</div>

		<!-- 4-Column List Grid -->
		<div class="main-content">
			<div class="list-grid">
				<!-- Column 1 -->
				<div class="list-column">
					<h2><span class="emoji">📍</span> States</h2>
					<ol>
						{statesCol1.map(state => (
							<li class="list-item" data-name={state.name.toLowerCase()}>
								<a 
									href="#" 
									class="state-link"
									data-state={state.name}
									data-cities={JSON.stringify(state.cities)}
								>{state.name}</a>
								<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" /></svg>
							</li>
						))}
					</ol>
				</div>
				<!-- Column 2: Union Territories -->
				<div class="list-column">
					<h2><span class="emoji">🇮🇳</span> Union Territories</h2>
					<ol>
						{unionTerritories.map(ut => (
							<li class="list-item" data-name={ut.name.toLowerCase()}>
								<a 
									href="#" 
									class="state-link"
									data-state={ut.name}
									data-cities={JSON.stringify(ut.cities)}
								>{ut.name}</a>
								<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" /></svg>
							</li>
						))}
					</ol>
				</div>
			</div>
		</div>

	</main>

	<!-- Modal (Floating Window) HTML -->
	<div id="city-modal" class="modal-overlay">
		<div class="modal-content">
			<div class="modal-header">
				<h2 id="modal-title">Cities in [State]</h2>
				<button id="modal-close" class="modal-close" aria-label="Close modal">&times;</button>
			</div>
			<div id="modal-body">
				<p id="modal-no-cities" style="display: none;">No specific cities listed yet. The main page for this location is coming soon!</p>
				<ol id="modal-city-list"></ol>
			</div>
		</div>
	</div>

	<!-- Client-side script for Search and Modal -->
	<script is:raw>
		document.addEventListener('DOMContentLoaded', () => {
	// --- STATE/CITY SEARCH LOGIC ---
	const searchInput = document.getElementById('state-search');
	const listItems = document.querySelectorAll('.list-item');

	searchInput.addEventListener('input', (e) => {
		const searchTerm = e.target.value.toLowerCase().trim();

		listItems.forEach(item => {
			const stateName = item.dataset.name;
			const stateLink = item.querySelector('.state-link');
			const citiesData = stateLink ? stateLink.dataset.cities : '[]';
			const cities = JSON.parse(citiesData);

			// 1. Check if the state name matches
			let isMatch = stateName.includes(searchTerm);

			// 2. If not, check if any city name matches
			if (!isMatch && cities.length > 0) {
				isMatch = cities.some(city => 
					city.name.toLowerCase().includes(searchTerm)
				);
			}

			// 3. Show or hide the item
			if (isMatch) {
				item.style.display = 'flex';
			} else {
				item.style.display = 'none';
			}
		});
	});

	// --- MODAL (FLOATING WINDOW) LOGIC ---
	const modal = document.getElementById('city-modal');
	const modalTitle = document.getElementById('modal-title');
	const modalCityList = document.getElementById('modal-city-list');
	const modalNoCities = document.getElementById('modal-no-cities');
	const modalClose = document.getElementById('modal-close');
	const stateLinks = document.querySelectorAll('.state-link');

	stateLinks.forEach(link => {
		link.addEventListener('click', (e) => {
			e.preventDefault();
			
			const stateName = link.dataset.state;
			const cities = JSON.parse(link.dataset.cities);

			// Special case: If only one city, go directly to that page.
			if (cities.length === 1 && cities[0].slug) {
				window.location.href = `/${cities[0].slug}`;
				return;
			}
			
			// Update modal title
			modalTitle.textContent = `Cities in ${stateName}`;
			
			// Clear previous list
			modalCityList.innerHTML = '';

			if (cities.length > 0) {
				// Hide "no cities" message
				modalNoCities.style.display = 'none';
				modalCityList.style.display = 'block';

				// Populate new city list
				cities.forEach(city => {
					const li = document.createElement('li');
					const a = document.createElement('a');
					a.href = `/${city.slug}`; // Link to the future city page
					a.textContent = city.name;
					li.appendChild(a);
					modalCityList.appendChild(li);
				});
			} else {
				// Show "no cities" message
				modalNoCities.style.display = 'block';
				modalCityList.style.display = 'none';
			}

			// Show the modal
			modal.classList.add('visible');
		});
	});

	// Function to close the modal
	const closeModal = () => {
		modal.classList.remove('visible');
	}

	// Close modal when X is clicked
	modalClose.addEventListener('click', closeModal);

	// Close modal when clicking on the overlay
	modal.addEventListener('click', (e) => {
		if (e.target === modal) {
			closeModal();
		}
	});
});
	</script>
</Layout>

