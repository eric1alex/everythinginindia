---
import Layout from '../layouts/Layout.astro';
import locations from '../data/locations.json'; // Your master list

// This is a special Astro function
export async function getStaticPaths() {
  // 1. Find all *existing* JSON data files
  const allCityData = await import.meta.glob('../data/cities/*.json');
  
  const allPages = [];
  const availableCities = []; // A list of cities that HAVE content

  // 2. First, let's find out which cities are available
  for (const loc of [...locations.states, ...locations.unionTerritories]) {
    for (const city of loc.cities) {
      const importPath = `../data/cities/${city.slug}.json`;
      if (allCityData[importPath]) {
        availableCities.push(city);
      }
    }
  }

  // 3. Now, create a page for *every* city in locations.json
  for (const loc of [...locations.states, ...locations.unionTerritories]) {
    for (const city of loc.cities) {
      
      const importPath = `../data/cities/${city.slug}.json`;
      let placesData = null; // Default to null (no content)

      // 4. If the JSON file exists, load its content
      if (allCityData[importPath]) {
        const cityDataModule = await allCityData[importPath]();
        placesData = cityDataModule.default;
      }

      // 5. Pass all data to the page. `places` will be null if no content exists.
      allPages.push({ 
        params: { city: city.slug },
        props: {
          cityName: city.name,
          stateName: loc.name,
          heroImageUrl: city.imageUrl || "https://placehold.co/1200x600/ccc/aaa?text=Where+In+India",
          mapUrl: city.mapUrl || "#",
          places: placesData, // This is the key! It's either the data or null.
          suggestions: availableCities // Pass the list of available cities
        }
      });
    }
  }

  return allPages;
}

// 6. Get all our props. `places` will be null for empty pages.
const { cityName, stateName, heroImageUrl, mapUrl, places, suggestions } = Astro.props;

// 7. Create a filtered list of suggestions (max 3, and not this current page)
const filteredSuggestions = suggestions
    .filter(c => c.slug !== Astro.params.city)
    .sort(() => 0.5 - Math.random()) // Randomize
    .slice(0, 3); // Take the first 3
---

<Layout 
  title=`${cityName} - Where In India`
  description={`The most trusted, hand-curated list of recommendations for ${cityName}, ${stateName}. Find the best cafes, stays, and hidden gems.`}
  ogImage={heroImageUrl}
>
	<main>
    <!-- 
      ===============================================================
      START: THE CONDITIONAL LOGIC
      If 'places' (our data) exists, show the recommendations.
      ===============================================================
    -->
		{places ? (
      <>
        <!-- New Hero Section -->
        <header class="hero">
          <div 
            class="hero-image hero-image-city" 
            style=`background-image: url(${heroImageUrl});`
          ></div>
          <div class="hero-text">
            <h1>The most trusted guide to {cityName}</h1>
            <p>Discover handpicked places, experiences, and local favorites in {stateName}</p>
          </div>
        </header>

        <!-- Main content grid -->
        <div class="main-content">
          <div class="recommendation-grid">
            {places.map(category => (
              <div class="recommendation-card">
                <h2>
                  <span class="emoji">{category.emoji}</span>
                  {category.title}
                </h2>
                <ol>
                  {category.items.map(item => (
                    <li>
                      <a href={item.url} target="_blank" rel="noopener noreferrer">{item.name}</a>
                    </li>
                  ))}
                </ol>
              </div>
            ))}
          </div>
        </div>

        <!-- Floating Map Button -->
        <a href={mapUrl} class="floating-map-button" id="map-button" target="_blank" rel="noopener noreferrer">
          <span class="map-icon">
            <svg width="22" height="22" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7Zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5Z" fill="currentColor"/>
            </svg>
          </span>
          <span class="map-text">Explore on Google Maps</span>
        </a>
      </>
    ) : (
    <!-- 
      ===============================================================
      ELSE: If 'places' is null, show the "Coming Soon" page.
      ===============================================================
    -->
      <div class="coming-soon-container">
        <h1 class="coming-soon-title">Coming Soon!</h1>
        <p class="coming-soon-text">
          We haven't built our guide for <strong>{cityName}</strong> just yet. </p>
        <p class="coming-soon-text">
          Know a great spot? Be the first to contribute and help us build this page!
        </p>
        <a href= "https://docs.google.com/forms/d/e/1FAIpQLScOGneda4XsF2NyMZeto6f59Niz4R8bn7eKFPPAQ4ymaEE6Vw/viewform?usp=dialog"  target="_blank" rel="noopener noreferrer"  class="coming-soon-button">Contribute a Place</a>

        <!-- Suggestions Section -->
        {filteredSuggestions.length > 0 && (
          <div class="suggestions-container">
            <h2 class="suggestions-title">In the meantime, you might want to check out...</h2>
            <div class="suggestions-grid">
              {filteredSuggestions.map(city => (
                <a href={`/${city.slug}`} class="suggestion-card" style={`background-image: url(${city.imageUrl})`}>
                  <div class="suggestion-card-content">
                    <h3>{city.name}</h3>
                  </div>
                </a>
              ))}
            </div>
          </div>
        )}
      </div>
    )}
    <!-- END: CONDITIONAL LOGIC -->
	</main>

	<!-- Button animation script (only runs if the button exists) -->
	<script is:raw>
		document.addEventListener('DOMContentLoaded', () => {
			const mapButton = document.getElementById('map-button');
			if (mapButton) {
				setTimeout(() => {
					mapButton.classList.add('collapsed');
				}, 5000);
			}
		});
	</script>
</Layout>

