---
import Layout from '../layouts/Layout.astro';
import locations from '../data/locations.json'; // Your master list

// This is a special Astro function
export async function getStaticPaths() {
  // 1. We find all the city data files *inside* this function
  const allCityData = await import.meta.glob('../data/cities/*.json');
  
  const allPages = [];

  // We use Promise.all to load all data in parallel, which is faster
  await Promise.all(
    locations.states.map(async (state) => {
      await Promise.all(
        state.cities.map(async (city) => {
          const importPath = `../data/cities/${city.slug}.json`;
          // 2. We check if the data file actually exists
          if (allCityData[importPath]) {
            // 3. We load the data for this city
            const cityDataModule = await allCityData[importPath]();
            const places = cityDataModule.default;
            
            // 4. We pass the city slug as "params" and all our data as "props"
            allPages.push({ 
              params: { city: city.slug },
              props: {
                cityName: city.name,
                stateName: state.name,
                heroImageUrl: city.imageUrl || "https://placehold.co/1200x600/ccc/aaa?text=Where+In+India",
                mapUrl: city.mapUrl || "#",
                places: places // Here is our loaded data!
              }
            });
          }
        })
      );
    })
  );

  await Promise.all(
    locations.unionTerritories.map(async (ut) => {
      await Promise.all(
        ut.cities.map(async (city) => {
          const importPath = `../data/cities/${city.slug}.json`;
          if (allCityData[importPath]) {
            const cityDataModule = await allCityData[importPath]();
            const places = cityDataModule.default;
            
            allPages.push({ 
              params: { city: city.slug },
              props: {
                cityName: city.name,
                stateName: ut.name,
                heroImageUrl: city.imageUrl || "https://placehold.co/1200x600/ccc/aaa?text=Where+In+India",
                mapUrl: city.mapUrl || "#",
                places: places
              }
            });
          }
        })
      );
    })
  );

  // This tells Astro to build a page for every city found
  return allPages;
}

// 5. We get all our data from Astro.props, which was passed from getStaticPaths
const { cityName, stateName, heroImageUrl, mapUrl, places } = Astro.props;
---

<Layout title=`${cityName} - Where In India`>
	<main>
		<!-- New Hero Section -->
		<header class="hero">
			<div 
				class="hero-image hero-image-city" 
				style=`background-image: url(${heroImageUrl});`
			></div>
			<div class="hero-text">
				<h1>The most trusted list of recos for {cityName}</h1>
				<p>Your curated guide to {stateName}</p>
			</div>
		</header>

		<!-- Main content grid -->
		<div class="main-content">
			<div class="recommendation-grid">
				
				<!-- Loop through all categories from the imported JSON -->
				{places.map(category => (
					<div class="recommendation-card">
						<h2>
							<span class="emoji">{category.emoji}</span>
							{category.title}
						</h2>
						<ol>
							{category.items.map(item => (
								<li>
									<a href={item.url} target="_blank" rel="noopener noreferrer">{item.name}</a>
								</li>
							))}
						</ol>
					</div>
				))}
			</div>
		</div>

		<!-- Floating Map Button -->
		<a href={mapUrl} class="floating-map-button" id="map-button" target="_blank" rel="noopener noreferrer">
			<span class="map-icon">
				<svg width="22" height="22" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7Zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5Z" fill="currentColor"/>
				</svg>
			</span>
			<span class="map-text">Explore on Google Maps</span>
		</a>

	</main>

	<!-- Button animation script -->
	<script is:raw>
		document.addEventListener('DOMContentLoaded', () => {
			const mapButton = document.getElementById('map-button');
			if (mapButton) {
				setTimeout(() => {
					mapButton.classList.add('collapsed');
				}, 5000);
			}
		});
	</script>
</Layout>

